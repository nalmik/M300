# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  config.vm.network "public_network", ip: "192.168.0.20"
  #config.vm.network "forwarded_port", guest:139, host:139, auto_correct: true
  #config.vm.network "forwarded_port", guest:445, host:445, auto_correct: true


  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"
  config.vm.synced_folder ".", "/home/vagrant/hostdata"

Vagrant::Config.run do |config|

end
  
config.vm.provider "virtualbox" do |vb|
  vb.memory = "2048"
end

config.vm.provision "shell", inline: <<-SHELL
  apt-get update
  sudo apt-get install -y samba
  #sudo useradd -m SambaUser
  #sudo chpasswd -e < /home/vagrant/hostdata/password.txt
  sudo mkdir /media/Share
  sudo chmod 777 /media/Share

  sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.backup
  echo "[SambaShare]" | sudo tee -a /etc/samba/smb.conf
  echo "    interfaces = 127.0.0.1, 192.168.0.20/24" | sudo tee -a /etc/samba/smb.conf
  echo "    bind interfaces only = yes" | sudo tee -a /etc/samba/smb.conf
  echo "    hosts allow = 127.0.0.1, 10.71.13.0/24" | sudo tee -a /etc/samba/smb.conf
  echo "    comment = Samba on Ubuntu" | sudo tee -a /etc/samba/smb.conf
  echo "    path = /media/Share" | sudo tee -a /etc/samba/smb.conf
  echo "    read only = no" | sudo tee -a /etc/samba/smb.conf
  echo "    browsable = yes" | sudo tee -a /etc/samba/smb.conf
  echo "    guest ok = yes" | sudo tee -a /etc/samba/smb.conf
  echo "    map to guest = bad user" | sudo tee -a /etc/samba/smb.conf
  echo "    guest account = nobody" | sudo tee -a /etc/samba/smb.conf
  sudo service smbd restart

  sudo apt-get install ufw
  sudo ufw --force enable
  sudo ufw allow ssh
  sudo ufw default deny incoming
  sudo ufw default allow outgoing
  sudo ufw allow 139
  sudo ufw allow 445
  sudo ufw allow from 10.71.13.0/24

SHELL

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
